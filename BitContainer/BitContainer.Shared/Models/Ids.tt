<#@ template language="C#" #>
<#@ output extension=".cs" #>

<# var idNames = new string [] {"CStorageEntityId", "CUserId"}; #>

using System;

namespace BitContainer.Shared.Models
{

<# foreach (string idName in idNames) { #>

    public struct <#= idName #> : IEquatable<<#= idName #>>
    {
        <# if (idName.Equals("CStorageEntityId")) { #>

        public static readonly CStorageEntityId RootId = new CStorageEntityId(Guid.Empty);

        public Boolean IsRootId => this.Equals(RootId);

        public void IfRootId(Action action)
        {
            if (IsRootId) action();
        }

        public void IfNotRootId(Action action)
        {
            if (!IsRootId) action();
        }

        <# } #>

        private readonly Guid _id;

        public <#= idName #>(Guid id)
        {
            _id = id;
        }

        public override string ToString()
        {
            return _id.ToString();
        }

        public override bool Equals(object obj)
        {
            if (!(obj is <#= idName #>)) return false;
            return Equals((<#= idName #>) obj);
        }

        public override int GetHashCode()
        {
            return _id.GetHashCode();
        }

        public bool Equals(<#= idName #> obj)
        {
            return _id.Equals(obj._id);
        }

        public static bool operator==(<#= idName #> obj1, <#= idName #> obj2)
        {
            return obj1.Equals(obj2);
        }

        public static bool operator!=(<#= idName #> obj1, <#= idName #> obj2)
        {
            return !(obj1 == obj2);
        }

        public Guid ToGuid()
        {
            return _id;
        }
    }

<# } #>
    
}
